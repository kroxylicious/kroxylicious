#
# Copyright Kroxylicious Authors.
#
# Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0
#

# Note the v1 in the filename refers to the version of the CustomResourceDefinition
# not any of the versions of API being defined.
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  # name must match the spec fields below, and be in the form: <plural>.<group>
  name: kafkaservices.kroxylicious.io
spec:
  # group name to use for REST API: /apis/<group>/<version>
  group: kroxylicious.io
  scope: Namespaced
  names:
    plural: kafkaservices
    singular: kafkaservice
    kind: KafkaService
    shortNames:
      - ks
  # list of versions supported by this CustomResourceDefinition
  versions:
    - name: v1alpha1
      served: true
      storage: true
      subresources:
        status: { }
      schema:
        openAPIV3Schema:
          type: object
          properties:
            metadata:
              type: object
            spec:
              type: object
              required: [ "bootstrapServers" ]
              properties:
                bootstrapServers:
                  description: Bootstrap servers of the Kafka cluster.
                  type: string
                  minLength: 1
                  pattern: ^(([^:]+:[0-9]{1,5}),)*([^:]+:[0-9]{1,5})$
                tls:
                  description: Configuration for TLS connections made to the Kafka cluster
                  type: object
                  properties:
                    certificateRef:
                      description: |
                        A reference to a resource holding the TLS client certificate to be used when 
                        connecting to the Kafka cluster. 
                        
                        When the resource is of `kind: Secret` it is expected to have `type: kubernetes.io/tls` with 
                        keys `tls.key` and `tls.crt`. See https://kubernetes.io/docs/concepts/configuration/secret/#tls-secrets.
                      type: object
                      required: [ "name" ]
                      properties:
                        kind:
                          description: The API kind of the resource containing the TLS client certificate.
                          type: string
                          default: Secret
                        group:
                          description: The API group of the resource containing the TLS client certificate.
                          type: string
                          default: ""
                        name:
                          description: The name of the resource containing the TLS client certificate.
                          type: string
                    trustAnchorRef:
                      description: |
                        A reference to a resource holding the trusted CA certificates for validation of
                        a Kafka broker's TLS server certificate.
                        If not specified the proxy will use the trust store inherited from the platform.
                      type: object
                      required: [ "name", "key" ]
                      properties:
                        kind:
                          description: The API kind of the resource containing the TLS client certificate.
                          type: string
                          default: ConfigMap
                        group:
                          description: The API group of the resource containing the TLS client certificate.
                          type: string
                          default: ""
                        name:
                          description: The name of the resource containing the TLS client certificate.
                          type: string
                        key:
                          description: | 
                            The name of the key identifying the certificate bundle within the resource. 
                            Supported formats for the bundle are: PEM, PKCS#12 and JKS.
                          type: string
                    protocols:
                      description: |
                        The allowed or denied TLS protocols.
                        Either `allowed` or `denied` can be given.
                        The supported protocols are those supported by the proxy JVM.
                      type: object
                      properties:
                        allowed:
                          description: |
                            The allowed TLS protocols, ordered by preference.
                            If not specified this defaults to the TLS protocols of the proxy JVM's default SSL context.
                          type: array
                          items:
                            type: string
                        denied:
                          description: |
                            The denied TLS protocols.
                            If not specified this defaults to the empty list.
                          type: array
                          items:
                            type: string
                          default: []
                    cipherSuites:
                      description: |
                        The allowed or denied cipher suites.
                        Either `allowed` or `denied` can be given.
                        The supported cipher suites are those supported by the proxy JVM.
                      type: object
                      properties:
                        allowed:
                          description: |
                            The allowed cipher suites.
                            If not specified a default list of ciphers, which depends on the runtime and enabled protocols, will be used.
                          type: array
                          items:
                            type: string
                        denied:
                          description: |
                            The denied cipher suites.
                            If not specified this will default to the empty list.
                          type: array
                          items:
                            type: string
                          default: []
                nodeIdRanges:
                  type: array
                  minItems: 1
                  description: |
                    Declares the ranges of node ids present in the Kafka Cluster this KafkaService refers to. Default 
                    value is a single range starting with node id 0 and ending with 2 inclusive. Note that if you wish
                    to expose this cluster using plain (non-TLS) connections it is desirable to use a compact set of
                    node id ranges, as every node id in every range requires a distinct listening port.
                    See also: https://kafka.apache.org/documentation/#brokerconfigs_node.id
                  items:
                    type: object
                    required: [ "start", "end" ]
                    x-kubernetes-validations:
                      - rule: "self.start <= self.end"
                        message: "end should be greater than or equal to start"
                    properties:
                      name:
                        description: "the name of this node id range"
                        type: string
                        minLength: 1
                      start:
                        description: "The first node id in the range"
                        type: integer
                      end:
                        description: "The last node id in the range, inclusive"
                        type: integer
            status:
              type: object
              properties:
                observedGeneration:
                  description: |
                    The metadata.generation that was observed during the last reconciliation by the operator.
                  type: integer
                conditions:
                  type: array
                  items:
                    type: object
                    properties:
                      lastTransitionTime:
                        description: |
                          lastTransitionTime is the last time the condition transitioned from one status to another. 
                          This should be when the underlying condition changed. 
                          If that is not known, then using the time when the API field changed is acceptable.
                        type: string
                        format: date-time
                      message:
                        description: |
                          message is a human readable message indicating details about the transition. 
                          This may be an empty string.
                        type: string
                        default: ""
                        nullable: false
                      observedGeneration:
                        description: |
                          observedGeneration represents the .metadata.generation that the condition was set based upon. 
                          For instance, if .metadata.generation is currently 12, but the 
                          .status.conditions[x].observedGeneration is 9, the condition is out of date with 
                          respect to the current state of the instance.
                        type: integer
                        nullable: false
                      reason:
                        description: |
                          reason contains a programmatic identifier indicating the reason for the condition's last transition. 
                          Producers of specific condition types may define expected values and meanings for this field, 
                          and whether the values are considered a guaranteed API. 
                          The value should be a CamelCase string. 
                          This field may not be empty.
                        type: string
                        nullable: false
                      status:
                        description: status of the condition, one of True, False, Unknown.
                        type: string
                        enum: [ "True", "False", "Unknown" ]
                      type:
                        description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        type: string
                    required:
                      - lastTransitionTime
                      - observedGeneration
                      - reason
                      - message
                      - type
