#
#  Licensed to the Apache Software Foundation (ASF) under one or more
#  contributor license agreements. See the NOTICE file distributed with
#  this work for additional information regarding copyright ownership.
#  The ASF licenses this file to You under the Apache License, Version 2.0
#  (the "License"); you may not use this file except in compliance with
#  the License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
name: Stage Release

# This workflow will stage a kroxylicious release.  The release artefacts will be
# built, signed, and staged on Nexus.  The staging repository will be closed.  A PR will be opened
# containing commits that versions the release and reopen main for development at the next snapshot version.
#
# Once the staged artefacts have been verified, run the workflow deploy_release with the argument `release` to
# release the artefacts to Maven Central and merge the release PR.
#
# It requires the following:
# variables:
# KROXYLICIOUS_SONATYPE_TOKEN_USERNAME        - Sonatype Access User Token Username
# secrets:
# KROXYLICIOUS_RELEASE_TOKEN                  - GitHub PAT, see RELEASING.md for required permissions
# KROXYLICIOUS_RELEASE_PRIVATE_KEY            - Private key of the project admin conducting the release
# KROXYLICIOUS_RELEASE_PRIVATE_KEY_PASSPHRASE - Passphrase used to protect the private key
# KROXYLICIOUS_SONATYPE_TOKEN_PASSWORD        - Sonatype Access User Token Password
#

on:
  workflow_dispatch:
    inputs:
      release-version:
        description: 'The release version, e.g. 0.7.0'
        required: true
      development-version:
        description: 'The next development version, e.g. 0.7.0-SNAPSHOT'
        required: true
      branch:
        description: 'The branch from which the release is cut'
        required: false
        default: 'main'
      website-repository:
        description: 'The URI of the website repository, starting with everything after the @, e.g. github.com/kroxylicious/kroxylicious.github.io.git'
        required: false
        default: 'github.com/kroxylicious/kroxylicious.github.io.git'
      skip-tests:
        description: 'Whether to skip the tests before pushing the tag'
        type: boolean
        required: false
        default: false

jobs:
  stage-release:
    runs-on: ubuntu-latest

    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.KROXYLICIOUS_RELEASE_TOKEN }}

      - name: 'Check team membership'
        if: ${{ github.repository == 'kroxylicious/kroxylicious' }}
        uses: tspascoal/get-user-teams-membership@v3
        id: team-membership
        with:
          username: ${{ github.actor }}
          team: release-engineers
          GITHUB_TOKEN: ${{ secrets.KROXYLICIOUS_RELEASE_TOKEN }}

      - name: 'Stop workflow if user is not a release-engineer'
        if: ${{ github.repository == 'kroxylicious/kroxylicious' && steps.team-membership.outputs.isTeamMember == 'false' }}
        run: |
          echo "${{ github.actor }} is not a member of https://github.com/orgs/kroxylicious/teams/release-engineers)"
          exit -1

      - name: 'Configure Git username/email'
        run: |
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR_ID}+${GITHUB_ACTOR}@users.noreply.github.com"

      - name: 'Cache Maven packages'
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: 'Set up Java'
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin
          server-id: central
          server-username: SONATYPE_TOKEN_USERNAME # env variable for Sonatype username
          server-password: SONATYPE_TOKEN_PASSWORD # env variable for Sonatype password
          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase
          gpg-private-key: ${{ secrets.KROXYLICIOUS_RELEASE_PRIVATE_KEY }} # Value of the GPG private key to import
          overwrite-settings: true

      - name: Setup Minikube
        uses: manusa/actions-setup-minikube@v2.14.0
        with:
          minikube version: 'v1.35.0'
          kubernetes version: 'v1.32.0'
          github token: ${{ secrets.KROXYLICIOUS_RELEASE_TOKEN }}

      - name: 'Verify no existing release note exist for tag'
        env:
          GH_TOKEN: ${{ secrets.KROXYLICIOUS_RELEASE_TOKEN }} # For the gh cmd line tool used by transition-github-release-note-state.sh
        run: ./scripts/transition-github-release-note-state.sh -v ${{ github.event.inputs.release-version }} -a

      - name: 'Prepare Release Environment'
        run: |
          echo "WORK_BRANCH=release-work-${{ github.event.inputs.release-version }}-${{github.run_id}}" >> $GITHUB_ENV
          # This label will be add to the release PR. The run id embedded in the label allows us to download
          # the release state file. This allows us to identify the deployment in Central Publishing Portal.
          RELCAND_ID_LABEL="__relcand_id-${{github.run_id}}"
          echo "RELCAND_ID_LABEL=${RELCAND_ID_LABEL}" >> $GITHUB_ENV

      - name: 'Create run label used to tag release PRs'
        env:
          GH_TOKEN: ${{ secrets.KROXYLICIOUS_RELEASE_TOKEN }}
        run: |
          gh label create ${RELCAND_ID_LABEL} \
                          --description "Used by release workflow to identify the PR for release candidate (${{ github.event.inputs.release-version }}). Do not modify." \
                          --force

      - name: 'Stage Release'
        env:
          SONATYPE_TOKEN_USERNAME: ${{ vars.KROXYLICIOUS_SONATYPE_TOKEN_USERNAME }}
          SONATYPE_TOKEN_PASSWORD: ${{ secrets.KROXYLICIOUS_SONATYPE_TOKEN_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.KROXYLICIOUS_RELEASE_PRIVATE_KEY_PASSPHRASE }}
          GH_TOKEN: ${{ secrets.KROXYLICIOUS_RELEASE_TOKEN }} # For the gh cmd line tool used by stage-release.sh
        run: |
          SIGNING_KEY_SHORT_NAME=$(gpg --list-public-keys --keyid-format short --with-colons | awk -F: '/^pub:/ {print $5}' | head -n 1)
          ./scripts/stage-release.sh -k "${SIGNING_KEY_SHORT_NAME}" \
                                     -v ${{ github.event.inputs.release-version }} \
                                     -n ${{ github.event.inputs.development-version }} \
                                     -b ${{ github.event.inputs.branch }} \
                                     -w ${{ env.WORK_BRANCH }} \
                                     -l ${{ env.RELCAND_ID_LABEL }} \
                                     ${{ github.event.inputs.skip-tests == 'true' && '-s' || '' }}
          # Deployment id is the id known to Central Publishing Portal
          echo "DEPLOYMENT_ID=$(cat DEPLOYMENT.ID)" >> $GITHUB_ENV

      - name: 'Build release state'
        run: |
          jq -n --arg deploymentId "${{ env.DEPLOYMENT_ID }}" \
                --arg releaseVersion "${{ github.event.inputs.release-version }}" \
                --arg developmentVersion "${{ github.event.inputs.development-version }}" \
                --arg workBranch "${{ env.WORK_BRANCH }}" \
              '$ARGS.named' > RELEASE_STATE.json

      - name: 'Archive release state (used by the promote workflow)'
        uses: actions/upload-artifact@v4
        with:
          name: RELEASE_STATE.json
          path: RELEASE_STATE.json

      - name: 'Stage release docs'
        if: ${{ success() }}
        run: |
          ./scripts/stage-docs.sh -v ${{ github.event.inputs.release-version }} \
                                  -b "prepare-v${{ github.event.inputs.release-version }}-release-docs-${{ github.run_id }}" \
                                  -u "https://user:${{ secrets.KROXYLICIOUS_RELEASE_TOKEN }}@${{ github.event.inputs.website-repository }}"
        env:
          GH_TOKEN: ${{ secrets.KROXYLICIOUS_RELEASE_TOKEN }} # For the gh cmd line tool used by stage-docs.sh

      - name: 'Drop stage repository, if failed'
        if: ${{ failure() &&  env.DEPLOYMENT_ID }}
        env:
          SONATYPE_TOKEN_USERNAME: ${{ vars.KROXYLICIOUS_SONATYPE_TOKEN_USERNAME }}
          SONATYPE_TOKEN_PASSWORD: ${{ secrets.KROXYLICIOUS_SONATYPE_TOKEN_PASSWORD }}
        run: |
          ./scripts/transition-staging-repository-state.sh -s drop -d "${DEPLOYMENT_ID}"

      - name: 'Drop run label used to tag release PR, if failed'
        if: ${{ failure() }}
        env:
          GH_TOKEN: ${{ secrets.KROXYLICIOUS_RELEASE_TOKEN }}
        run: |
          gh label delete ${RELCAND_ID_LABEL} --yes || true

      - name: 'Add pending status to block the merge'
        env:
          GH_TOKEN: ${{ secrets.KROXYLICIOUS_RELEASE_TOKEN }}
        run: |
          WORK_SHA=$(git rev-list -n 1 origin/${WORK_BRANCH})
          gh api --method POST \
                 -H "Accept: application/vnd.github+json" \
                 -H "X-GitHub-Api-Version: 2022-11-28" \
                 /repos/${{ github.repository }}/statuses/${WORK_SHA} \
                 -f "state=pending" \
                 -f "description=Blocked until staging repository is released to Maven Central." \
                 -f "context=maven-central"

      - name: 'Comment on PR to prompt next phase of the release'
        env:
          GH_TOKEN: ${{ secrets.KROXYLICIOUS_RELEASE_TOKEN }} # For the gh cmd line tool used by stage-release.sh
        run: |
          export REPO="https://central.sonatype.com/api/v1/publisher/deployment/${{ env.DEPLOYMENT_ID }}/download"
          envsubst << "EOF" | gh pr comment ${{ env.WORK_BRANCH }} --body-file -
          Hey, that's the ${{ github.event.inputs.release-version }} release prepared and its artefacts successfully staged to Sonatype. This PR contains a commit for ${{ github.event.inputs.release-version }} and a commit for ${{ github.event.inputs.development-version }} which will reopen main for new work.
          
          There are a couple of steps to do before the release is completed.
          
          * [ ] Let the CI workflow on this PR complete
          * [ ] [Kick the tyres](https://github.com/kroxylicious/kroxylicious/blob/main/RELEASING.md#verify-the-release) using the staged Maven artefacts (available at `${REPO}`).
                You can use this Maven snippet in your test project's pom.xml to configure Maven to download from the Portal. You also need to configure Maven to [authenticate](https://central.sonatype.org/publish/publish-portal-api/#maven) using
                your [Sonatype user token](https://central.sonatype.com/account).
            ```
            <repositories>
              <repository>
                <id>central.manual.testing</id>
                <url>${REPO}</url>
              </repository>
            </repositories>
            ```
          * [ ] Approve this PR.
          
          Once the above is done, comment <code>&commat;kroxylicious-robot promote-release</code> on this PR. This will release the artefacts to Maven Central and merge this PR to main.
          If things don't look good, abort the release by saying <code>&commat;kroxylicious-robot drop-release</code>.
          
          Thank you,
          Your friendly Kroxylicious Github Robot.
          EOF
