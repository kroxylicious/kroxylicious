#
#  Licensed to the Apache Software Foundation (ASF) under one or more
#  contributor license agreements. See the NOTICE file distributed with
#  this work for additional information regarding copyright ownership.
#  The ASF licenses this file to You under the Apache License, Version 2.0
#  (the "License"); you may not use this file except in compliance with
#  the License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
name: Promote Release

# This workflow is dispatched by robot-command-dispatcher in response to a promote-release
# (or drop-release command).
#
# It will release the staged maven artefacts, and merge the release PR.
#
# It requires the following:
# inputs:
# release-pr-issue-number - the issue number of release PR
# command - promote-release or drop-release
#
# variables:
# KROXYLICIOUS_SONATYPE_TOKEN_USERNAME - Sonatype Access User Token Username
#
# secrets:
# KROXYLICIOUS_SONATYPE_TOKEN_PASSWORD - Sonatype Access User Token Password
# KROXYLICIOUS_RELEASE_TOKEN             - GitHub PAT wih content/createPullRequest permission for Kroxylicious repo.
#

on:
  workflow_call:
    inputs:
      release-pr-issue-number:
        description: 'PR number that is performing the release'
        type: number
        required: true
      command:
        description: 'Dispatched command'
        required: true
        type: string
    secrets:
      KROXYLICIOUS_SONATYPE_TOKEN_PASSWORD:
        required: true
      KROXYLICIOUS_RELEASE_TOKEN:
        required: true

jobs:
  promote-release:
    runs-on: ubuntu-latest

    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.KROXYLICIOUS_RELEASE_TOKEN }}
          fetch-tags: true
          fetch-depth: 0

      - name: 'Require promote-release to be run on base repository'
        if: ${{ inputs.command == 'promote-release' && github.repository != 'kroxylicious/kroxylicious' }}
        run: |
          echo "The 'promote-release' command can only be run from the 'kroxylicious/kroxylicious' repository."
          exit 1

      - name: 'Check team membership'
        if: ${{ github.repository == 'kroxylicious/kroxylicious' }}
        uses: tspascoal/get-user-teams-membership@v3
        id: team-membership
        with:
          username: ${{ github.actor }}
          team: release-engineers
          GITHUB_TOKEN: ${{ secrets.KROXYLICIOUS_RELEASE_TOKEN }}

      - name: 'Stop workflow if user is not a release-engineer'
        env:
          GH_TOKEN: ${{ secrets.KROXYLICIOUS_RELEASE_TOKEN }}
        if: ${{ github.repository == 'kroxylicious/kroxylicious' && steps.team-membership.outputs.isTeamMember == 'false' }}
        run: |
          gh issue comment  ${{ github.event.issue.number }} --body "${{ github.actor }} is not a member of https://github.com/orgs/kroxylicious/teams/release-engineers)"
          exit -1

      - name: 'Get run id of stage release workflow'
        env:
          GH_TOKEN: ${{ secrets.KROXYLICIOUS_RELEASE_TOKEN }}
        run: |
          RELCAND_ID=$(gh issue view ${{ github.event.issue.number }} --json labels | jq --raw-output --exit-status \
            '[.labels.[] | select(.name | startswith("__relcand_id-"))] |
             if . | length == 1 then first else "unexpected number of relcand_ids on PR" | halt_error end | 
             .name | sub("__relcand_id-"; "")')
          echo "RELCAND_ID=${RELCAND_ID}" >> $GITHUB_ENV

      - name: Download release state artefact
        uses: dawidd6/action-download-artifact@v11
        with:
          workflow: stage-release
          run_id: ${{ env.RELCAND_ID }}
          name: RELEASE_STATE.json

      - name: 'Extract deployment id from the release state'
        run: |
          DEPLOYMENT_ID=$(jq --exit-status --raw-output '.deploymentId' RELEASE_STATE.json)
          echo "DEPLOYMENT_ID=${DEPLOYMENT_ID}" >> $GITHUB_ENV

      - name: 'Stop workflow if PR is not approved'
        if: ${{ github.repository == 'kroxylicious/kroxylicious' && inputs.command == 'promote-release' }}
        env:
          GH_TOKEN: ${{ secrets.KROXYLICIOUS_RELEASE_TOKEN }}
        run: |
            PR_APPROVAL="$(gh pr view ${{ inputs.release-pr-issue-number}} --json reviewDecision | jq -r .reviewDecision)"
            if [[ "$PR_APPROVAL" != "APPROVED" ]]; then
              gh issue comment  ${{ github.event.issue.number }} --body "PR is not Approved! You must approve the release PR before promoting it"
              exit -1
            fi
            echo "PR is Approved, Continuing promotion."

      - name: 'Get the branch name associated with the PR'
        env:
          GH_TOKEN: ${{ secrets.KROXYLICIOUS_RELEASE_TOKEN }}
        run: |
            echo "PR_BRANCH=$(gh pr view ${{ inputs.release-pr-issue-number}} --json headRefName | jq -r .headRefName)" >> $GITHUB_ENV

      - name: 'Branch name matches naming conventions'
        env:
          GH_TOKEN: ${{ secrets.KROXYLICIOUS_RELEASE_TOKEN }}
        run: |
          if [[ ! "${PR_BRANCH}" =~ ^release-work- ]]; then
            gh issue comment  ${{ github.event.issue.number }} --body "This PR's branch name (${PR_BRANCH}) is not in the expected form."
            exit -1
          fi

      - name: 'Get release version from the branch of PR'
        run: |
          # This knows the commit that precedes PR_BRANCH will carry the tag.
          TAG=$(git name-rev --no-undefined --tags --name-only  origin/${PR_BRANCH}^)
          if [[ ! "${TAG}" =~ ^v ]]; then
            gh issue comment  ${{ github.event.issue.number }} --body "The release tag '${TAG}' is not in the expected form."
            exit -1
          fi
          echo "RELEASE_VERSION=$(echo ${TAG} | sed -e 's/^v//')" >> $GITHUB_ENV

      - name: 'Get heads'
        run: |
          # Get PR's ref.
          echo "PR_REF=$(git rev-list -n 1 origin/${PR_BRANCH})" >> $GITHUB_ENV

          # Get main's current head
          echo "MAIN_HEAD=$(git rev-list -n 1 main)" >> $GITHUB_ENV

          # Get PR's view of where main ought to be.  This is two commits behind PR's head.
          echo "PR_MAIN_REF=$(git rev-list -n 1 origin/${PR_BRANCH}^^)" >> $GITHUB_ENV

      - name: 'Check for PR/main divergence'
        if: ${{ inputs.command == 'promote-release' }}
        env:
          GH_TOKEN: ${{ secrets.KROXYLICIOUS_RELEASE_TOKEN }}
        run: |
          if [[ "${MAIN_HEAD}" != "${PR_MAIN_REF}" ]];
          then
            gh pr comment --body "Release PR (expects main ${PR_MAIN_REF}) has diverged from main (${MAIN_HEAD}). You must drop this release and restage the release." ${{ inputs.release-pr-issue-number }}
            exit 1
          fi

      - name: 'Check build workflow has completed successfully'
        if: ${{ inputs.command == 'promote-release' }}
        env:
          GH_TOKEN: ${{ secrets.KROXYLICIOUS_RELEASE_TOKEN }}
        run: |
          UNFINISHED_OR_ERRORED=$(gh api \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/${{ github.repository }}/commits/${PR_REF}/check-runs \
              | jq --exit-status -r '[.check_runs[] | select( .status != "completed" or .conclusion != "success")] | length')

          if [[ ${UNFINISHED_OR_ERRORED} > 0 ]]; then
            gh pr comment --body "${UNFINISHED_OR_ERRORED} build check(s) have not completed successfully. If they are still running, you can ask me to promote-release again once they are finished." ${{ inputs.release-pr-issue-number }}
            exit 1
          fi

      - name: 'Transition Central Publishing Portal to desired state'
        env:
          SONATYPE_TOKEN_USERNAME: ${{ vars.KROXYLICIOUS_SONATYPE_TOKEN_USERNAME }}
          SONATYPE_TOKEN_PASSWORD: ${{ secrets.KROXYLICIOUS_SONATYPE_TOKEN_PASSWORD }}
        run: |
          ./scripts/transition-staging-repository-state.sh -d "${{ env.DEPLOYMENT_ID}}" \
                                                           -s "${{ inputs.command == 'promote-release' && 'release' || 'drop' }}"

      - name: 'Unblock the merge'
        if: ${{ inputs.command == 'promote-release' }}
        env:
          GH_TOKEN: ${{ secrets.KROXYLICIOUS_RELEASE_TOKEN }}
        run: |
          gh api --method POST \
                 -H "Accept: application/vnd.github+json" \
                 -H "X-GitHub-Api-Version: 2022-11-28" \
                 /repos/${{ github.repository }}/statuses/${PR_REF} \
                 -f "state=success" \
                 -f "description=Release to Maven Central is complete" \
                 -f "context=maven-central"

      - name: 'Transition release notes to desired state'
        env:
          GH_TOKEN: ${{ secrets.KROXYLICIOUS_RELEASE_TOKEN }} # For the gh cmd line tool used by transition-github-release-note-state.sh
        run: ./scripts/transition-github-release-note-state.sh -s  ${{ inputs.command == 'promote-release' && 'release' || 'drop' }} -v ${{ env.RELEASE_VERSION }}

      - name: 'Merge PR'
        if: ${{ inputs.command == 'promote-release' }}
        env:
          GH_TOKEN: ${{ secrets.KROXYLICIOUS_RELEASE_TOKEN }}
        run: |
          gh pr merge --delete-branch --rebase ${{ inputs.release-pr-issue-number }}

      - name: 'Drop PR'
        if: ${{ inputs.command == 'drop-release' }}
        env:
          GH_TOKEN: ${{ secrets.KROXYLICIOUS_RELEASE_TOKEN }}
        run: |
          gh pr close --comment "Release dropped" --delete-branch ${{ inputs.release-pr-issue-number }} 

      - name: 'Drop run label used to tag release PR'
        env:
          GH_TOKEN: ${{ secrets.KROXYLICIOUS_RELEASE_TOKEN }}
        run: |
          gh label delete "__relcand_id-${RELCAND_ID}" --yes || true

