/*
 * Copyright Kroxylicious Authors.
 *
 * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0
 */

package io.kroxylicious.filters.sasl.inspection;

import java.util.Base64;

import static java.nio.charset.StandardCharsets.UTF_8;

final class TestData {
    //
    // SASL PLAIN - Known good from https://datatracker.ietf.org/doc/html/rfc4616
    //
    static final byte[] SASL_PLAIN_CLIENT_INITIAL = "\0tim\0tanstaaftanstaaf".getBytes(UTF_8);
    static final byte[] SASL_PLAIN_CLIENT_INITIAL_WITH_AUTHZID = "Ursel\0Kurt\0xipj3plmq".getBytes(UTF_8);

    //
    // SCRAM-SHA-256 - Known good from https://datatracker.ietf.org/doc/html/rfc7677
    //
    static final byte[] SASL_SCRAM_SHA_256_CLIENT_INITIAL = "n,,n=user,r=rOprNGfwEbeRWgbNEkqO".getBytes(UTF_8);
    static final byte[] SASL_SCRAM_SHA256_CLIENT_INITIAL_WITH_AUTHZID = "n,a=Ursel,n=user,r=rOprNGfwEbeRWgbNEkqO".getBytes(UTF_8);
    static final byte[] SASL_SCRAM_SHA_256_SERVER_FIRST = "r=rOprNGfwEbeRWgbNEkqO%hvYDpWUa2RaTCAfuxFIlj)hNlF$k0,s=W22ZaJ0SNY7soEsUEjb6gQ==,i=4096".getBytes(
            UTF_8);
    static final byte[] SASL_SCRAM_SHA_256_CLIENT_FINAL = "c=biws,r=rOprNGfwEbeRWgbNEkqO%hvYDpWUa2RaTCAfuxFIlj)hNlF$k0,p=dHzbZapWIk4jUhN+Ute9ytag9zjfMHgsqmmiz7AndVQ="
            .getBytes(UTF_8);
    static final byte[] SASL_SCRAM_SHA_256_SERVER_FINAL = "v=6rriTRBi23WpRR/wtup+mMhUZUn/dB5nLTJRsjl95G4=".getBytes(UTF_8);

    //
    // SCRAM-SHA-512 (test data not from authoritative source).
    //

    static final byte[] SASL_SCRAM_SHA_512_CLIENT_INITIAL = SASL_SCRAM_SHA_256_CLIENT_INITIAL;
    static final byte[] SASL_SCRAM_SHA_512_SERVER_FIRST = "r=rOprNGfwEbeRWgbNEkqO02431b08-2f89-4bad-a4e6-80c0564ec865,s=Yin2FuHTt/M0kJWb0t9OI32n2VmOGi3m+JfjOvuDF88=,i=4096"
            .getBytes(UTF_8);
    static final byte[] SASL_SCRAM_SHA_512_CLIENT_FINAL = "c=biws,r=rOprNGfwEbeRWgbNEkqO02431b08-2f89-4bad-a4e6-80c0564ec865,p=Hc5yec3NmCD7t+kFRw4/3yD6/F3SQHc7AVYschRja+Bc3sbdjlA0eH1OjJc0DD4ghn1tnXN5/Wr6qm9xmaHt4A=="
            .getBytes(UTF_8);
    static final byte[] SASL_SCRAM_SHA_512_SERVER_FINAL = "v=BQuhnKHqYDwQWS5jAw4sZed+C9KFUALsbrq81bB0mh+bcUUbbMPNNmBIupnS2AmyyDnG5CTBQtkjJ9kyY4kzmw==".getBytes(
            UTF_8);

    //
    // SASL OAUTHBEARER -
    //

    // Known good from https://datatracker.ietf.org/doc/html/rfc7628#section-4.1
    // Note: In the RFC, the auth key value is not a JWT.
    public static final byte[] SASL_OAUTHBEARER_CLIENT_INITIAL = Base64.getDecoder().decode(
            "bixhPXVzZXJAZXhhbXBsZS5jb20sAWhvc3Q9c2VydmVyLmV4YW1wbGUuY29tAXBvcnQ9MTQzAWF1dGg9QmVhcmVyIHZGOWRmdDRxbVRjMk52YjNSbGNrQmhiSFJoZG1semRHRXVZMjl0Q2c9PQEB");
    public static final byte[] SASL_OAUTHBEARER_CLIENT_INITIAL_ENCODED_COMMA = "n,a=billy=2Cbob,\u0001host=server.example.com\u0001port=143\u0001auth=Bearer vF9dft4qmTc2Nvb3RlckBhbHRhdmlzdGEuY29tCg==\u0001\u0001"
            .getBytes(UTF_8);
    public static final byte[] SASL_OAUTHBEARER_CLIENT_INITIAL_ENCODED_EQUALS = "n,a=billy=3Dbob,\u0001host=server.example.com\u0001port=143\u0001auth=Bearer vF9dft4qmTc2Nvb3RlckBhbHRhdmlzdGEuY29tCg==\u0001\u0001"
            .getBytes(UTF_8);

    // rfc7628 failure case (empty auth)
    public static final byte[] SASL_OAUTHBEARER_CLIENT_INITIAL_EMPTY_AUTH = Base64.getDecoder()
            .decode("bixhPXVzZXJAZXhhbXBsZS5jb20sAWhvc3Q9c2VydmVyLmV4YW1wbGUuY29tAXBvcnQ9MTQzAWF1dGg9AQE=");

    // Believed good signed JWT generated by JWT Encoder https://token.dev/ (sub=johndoe)
    public static final byte[] SASL_OAUTHBEARER_SIGNED_JWT = "n,,\u0001host=server.example.com\u0001port=143\u0001auth=Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqb2huZG9lIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNzYwMzY4NTg2LCJleHAiOjE3NjAzNzIxODZ9.TuSlWIpx1qQuUA3QhpnTx4LV2o_RTpy15azKvu7lO4M\u0001\u0001"
            .getBytes(UTF_8);

    // Believed good unsecured JWT generated by JWT Encoder https://token.dev/ (sub=johndoe,alg=none)
    public static final byte[] SASL_OAUTHBEARER_UNSECURED_JWT = "n,,\u0001host=server.example.com\u0001port=143\u0001auth=Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJzdWIiOiJqb2huZG9lIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNzYwMzY4NTg2LCJleHAiOjE3NjAzNzIxODZ9.\u0001\u0001"
            .getBytes(UTF_8);

    // Believed good encrypted JWT generated by https://dinochiesa.github.io/jwt/
    public static final byte[] SASL_OAUTHBEARER_ENCRYPTED_JWT = "n,,\u0001host=server.example.com\u0001port=143\u0001auth=Bearer eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkExMjhHQ00ifQ.umEQBATYaLCIiOTmzKBC2dG-30II0b-TMRVptTrKYBxZvtDJk7uQJfsHCvxVZQKostNCgSrWpzxRlCihS9xw6UqRB7kLGTrXrQih16S2QKEvYkDoK54HxPrflKSAgEQL5DxvCkEMV6nK47UUlWnOQnnPysBvX-klJiBfElxdj8D7eKmfb-hvwCcmkLIXPIU-pkD-wO4BsbVnyZsUzLH_1JNPxMuF4LWNC9mZOgreKJsM4uj1xCe5tZ5fFaz0RTwY_6JfwMh_jppinmuBh2TGJZmi-bEV_bE--z-GqdufuZNOVswfppb9ybug6lPOC2-pMF_5FfEeAqFeYP7zEZSA8g.aauAvjh0V9KbPPwg.SC6EjswVcbfXcx0gBA9by1NIwtYg3foo_XC9bIQRhcgJiapngN8pJxYOUM_36PBsMe2fLUr2iR-SbZayF45owHfj_Mj1ytVxkaH4mcAg-UFHV-RrzvYgsgJB5Lcq.eSJtrW6dzjcAAa2E-hmi7g\u0001\u0001"
            .getBytes(UTF_8);

    private TestData() {
        //
    }
}
