<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright Kroxylicious Authors.

    Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0

-->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>io.kroxylicious</groupId>
        <artifactId>kroxylicious-parent</artifactId>
        <version>0.15.0-SNAPSHOT</version>
    </parent>

    <artifactId>kroxylicious-kubernetes-api</artifactId>
    <version>0.15.0-SNAPSHOT</version>
    <name>Kubernetes CRD API</name>
    <description>The Kubernetes Custom Resource Definitions for the Kroxylicious Operator and their Java equivalents.

        Note we only consider the CRD's themselves to be our public API. We do not ensure compatability with the Java classes.
    </description>

    <properties>
        <josdk.version>5.1.2</josdk.version>
        <log4j.version>2.20.0</log4j.version>
        <fabric8-client.version>7.1.0</fabric8-client.version>
        <lombok.version>1.18.38</lombok.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!-- note, we're inheriting the jackson & micrometer BOMs from our parent pom -->
            <dependency>
                <groupId>io.javaoperatorsdk</groupId>
                <artifactId>operator-framework-bom</artifactId>
                <version>${josdk.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>io.fabric8</groupId>
                <artifactId>kubernetes-client-bom</artifactId>
                <version>${kubernetes-client.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>io.fabric8</groupId>
            <artifactId>kubernetes-client-api</artifactId>
        </dependency>
        <dependency>
            <groupId>io.fabric8</groupId>
            <artifactId>kubernetes-model-common</artifactId>
        </dependency>
        <dependency>
            <groupId>io.fabric8</groupId>
            <artifactId>kubernetes-model-core</artifactId>
        </dependency>
        <dependency>
            <groupId>io.fabric8</groupId>
            <artifactId>generator-annotations</artifactId>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <scope>compile</scope>
        </dependency>

        <!-- extraAnnotations requires these additional dependencies -->
        <dependency>
            <groupId>io.sundr</groupId>
            <artifactId>builder-annotations</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>com.github.spotbugs</groupId>
            <artifactId>spotbugs-annotations</artifactId>
        </dependency>

        <!-- test dependencies -->
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <!-- Our CRDs are the source of truth for the Kube API; Java code is derived -->
                <groupId>io.fabric8</groupId>
                <artifactId>java-generator-maven-plugin</artifactId>
                <version>${fabric8-client.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!-- The LocallyRunOperatorExtension used in the tests depends on the
                         CRDs being in this exact location.
                         See https://github.com/operator-framework/java-operator-sdk/issues/2561
                    -->
                    <source>src/main/resources/META-INF/fabric8</source>
                    <extraAnnotations>true</extraAnnotations>
                    <existingJavaTypes>
                        <!-- From the kubernetes API -->
                        <io.kroxylicious.kubernetes.api.v1alpha1.kafkaproxyspec.PodTemplate>
                            io.fabric8.kubernetes.api.model.PodTemplateSpec
                        </io.kroxylicious.kubernetes.api.v1alpha1.kafkaproxyspec.PodTemplate>
                        <io.kroxylicious.kubernetes.api.v1alpha1.kafkaproxyspec.infrastructure.proxycontainer.Resources>
                            io.fabric8.kubernetes.api.model.ResourceRequirements
                        </io.kroxylicious.kubernetes.api.v1alpha1.kafkaproxyspec.infrastructure.proxycontainer.Resources>

                        <!-- Common types used across our own CRDs -->
                        <io.kroxylicious.kubernetes.api.v1alpha1.kafkaproxyingressspec.ProxyRef>
                            io.kroxylicious.kubernetes.api.common.ProxyRef
                        </io.kroxylicious.kubernetes.api.v1alpha1.kafkaproxyingressspec.ProxyRef>
                        <io.kroxylicious.kubernetes.api.v1alpha1.virtualkafkaclusterspec.ProxyRef>
                            io.kroxylicious.kubernetes.api.common.ProxyRef
                        </io.kroxylicious.kubernetes.api.v1alpha1.virtualkafkaclusterspec.ProxyRef>
                        <io.kroxylicious.kubernetes.api.v1alpha1.virtualkafkaclusterspec.TargetKafkaServiceRef>
                            io.kroxylicious.kubernetes.api.common.KafkaServiceRef
                        </io.kroxylicious.kubernetes.api.v1alpha1.virtualkafkaclusterspec.TargetKafkaServiceRef>
                        <io.kroxylicious.kubernetes.api.v1alpha1.virtualkafkaclusterspec.ingresses.IngressRef>
                            io.kroxylicious.kubernetes.api.common.IngressRef
                        </io.kroxylicious.kubernetes.api.v1alpha1.virtualkafkaclusterspec.ingresses.IngressRef>
                        <io.kroxylicious.kubernetes.api.v1alpha1.kafkaservicespec.tls.TrustAnchorRef>
                            io.kroxylicious.kubernetes.api.common.TrustAnchorRef
                        </io.kroxylicious.kubernetes.api.v1alpha1.kafkaservicespec.tls.TrustAnchorRef>
                        <io.kroxylicious.kubernetes.api.v1alpha1.kafkaservicespec.tls.CertificateRef>
                            io.kroxylicious.kubernetes.api.common.CertificateRef
                        </io.kroxylicious.kubernetes.api.v1alpha1.kafkaservicespec.tls.CertificateRef>
                        <io.kroxylicious.kubernetes.api.v1alpha1.kafkaservicespec.tls.Protocols>
                            io.kroxylicious.kubernetes.api.common.Protocols
                        </io.kroxylicious.kubernetes.api.v1alpha1.kafkaservicespec.tls.Protocols>
                        <io.kroxylicious.kubernetes.api.v1alpha1.kafkaservicespec.tls.CipherSuites>
                            io.kroxylicious.kubernetes.api.common.CipherSuites
                        </io.kroxylicious.kubernetes.api.v1alpha1.kafkaservicespec.tls.CipherSuites>
                        <io.kroxylicious.kubernetes.api.v1alpha1.virtualkafkaclusterspec.ingresses.tls.CertificateRef>
                            io.kroxylicious.kubernetes.api.common.CertificateRef
                        </io.kroxylicious.kubernetes.api.v1alpha1.virtualkafkaclusterspec.ingresses.tls.CertificateRef>
                        <io.kroxylicious.kubernetes.api.v1alpha1.virtualkafkaclusterspec.ingresses.tls.TrustAnchorRef>
                            io.kroxylicious.kubernetes.api.common.TrustAnchorRef
                        </io.kroxylicious.kubernetes.api.v1alpha1.virtualkafkaclusterspec.ingresses.tls.TrustAnchorRef>
                        <io.kroxylicious.kubernetes.api.v1alpha1.virtualkafkaclusterspec.ingresses.tls.Protocols>
                            io.kroxylicious.kubernetes.api.common.Protocols
                        </io.kroxylicious.kubernetes.api.v1alpha1.virtualkafkaclusterspec.ingresses.tls.Protocols>
                        <io.kroxylicious.kubernetes.api.v1alpha1.virtualkafkaclusterspec.ingresses.tls.CipherSuites>
                            io.kroxylicious.kubernetes.api.common.CipherSuites
                        </io.kroxylicious.kubernetes.api.v1alpha1.virtualkafkaclusterspec.ingresses.tls.CipherSuites>
                        <io.kroxylicious.kubernetes.api.v1alpha1.virtualkafkaclusterspec.FilterRefs>
                            io.kroxylicious.kubernetes.api.common.FilterRef
                        </io.kroxylicious.kubernetes.api.v1alpha1.virtualkafkaclusterspec.FilterRefs>
                        <io.kroxylicious.kubernetes.api.v1alpha1.kafkaproxystatus.Conditions>
                            io.kroxylicious.kubernetes.api.common.Condition
                        </io.kroxylicious.kubernetes.api.v1alpha1.kafkaproxystatus.Conditions>
                        <io.kroxylicious.kubernetes.api.v1alpha1.virtualkafkaclusterstatus.Conditions>
                            io.kroxylicious.kubernetes.api.common.Condition
                        </io.kroxylicious.kubernetes.api.v1alpha1.virtualkafkaclusterstatus.Conditions>
                        <io.kroxylicious.kubernetes.api.v1alpha1.kafkaproxystatus.clusters.Conditions>
                            io.kroxylicious.kubernetes.api.common.Condition
                        </io.kroxylicious.kubernetes.api.v1alpha1.kafkaproxystatus.clusters.Conditions>
                        <io.kroxylicious.kubernetes.api.v1alpha1.kafkaproxyingressstatus.Conditions>
                            io.kroxylicious.kubernetes.api.common.Condition
                        </io.kroxylicious.kubernetes.api.v1alpha1.kafkaproxyingressstatus.Conditions>
                        <io.kroxylicious.kubernetes.api.v1alpha1.kafkaservicestatus.Conditions>
                            io.kroxylicious.kubernetes.api.common.Condition
                        </io.kroxylicious.kubernetes.api.v1alpha1.kafkaservicestatus.Conditions>
                        <io.kroxylicious.kubernetes.api.v1alpha1.kafkaprotocolfilterstatus.Conditions>
                            io.kroxylicious.kubernetes.api.common.Condition
                        </io.kroxylicious.kubernetes.api.v1alpha1.kafkaprotocolfilterstatus.Conditions>
                        <io.kroxylicious.kubernetes.api.v1alpha1.kafkaprotocolfilterspec.ConfigTemplate>
                            java.lang.Object
                        </io.kroxylicious.kubernetes.api.v1alpha1.kafkaprotocolfilterspec.ConfigTemplate>
                    </existingJavaTypes>
                    <packageOverrides>
                        <!-- the default package name ($apiGroup.$apiVersion) doesn't work for us -->
                        <io.kroxylicious.v1alpha1>io.kroxylicious.kubernetes.api.v1alpha1</io.kroxylicious.v1alpha1>
                        <io.kroxylicious.filter.v1alpha1>io.kroxylicious.kubernetes.filter.api.v1alpha1</io.kroxylicious.filter.v1alpha1>
                    </packageOverrides>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>analyze</id>
                        <goals>
                            <goal>analyze-only</goal>
                        </goals>
                        <configuration>
                            <ignoredUnusedDeclaredDependencies>
                                <!-- generated CRD classes do actually use these, but the dependency plugin doesn't see that -->
                                <ignoredUnusedDeclaredDependency>io.sundr:builder-annotations</ignoredUnusedDeclaredDependency>
                                <ignoredUnusedDeclaredDependency>org.projectlombok:lombok</ignoredUnusedDeclaredDependency>
                                <ignoredUnusedDeclaredDependency>io.fabric8:generator-annotations</ignoredUnusedDeclaredDependency>
                            </ignoredUnusedDeclaredDependencies>
                            <ignoredNonTestScopedDependencies>
                                <ignoredNonTestScopedDependency>com.fasterxml.jackson.core:jackson-core</ignoredNonTestScopedDependency>
                                <ignoredNonTestScopedDependency>com.fasterxml.jackson.dataformat:jackson-dataformat-yaml</ignoredNonTestScopedDependency>
                                <ignoredNonTestScopedDependency>com.fasterxml.jackson.datatype:jackson-datatype-jsr310s</ignoredNonTestScopedDependency>
                            </ignoredNonTestScopedDependencies>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>

</project>